{"./":{"url":"./","title":"介绍","keywords":"","body":"``# My Book This file file serves as your book's preface, a great place to describe your book's content and ideas. © 2023 Mr.yang All Rights Reserved ,powered by Gitbook            updated 2023-02-17 20:23:56 "},"di-yi-zhang.html":{"url":"di-yi-zhang.html","title":"第一章","keywords":"","body":" © 2023 Mr.yang All Rights Reserved ,powered by Gitbook            updated 2023-02-16 17:22:51 "},"di-yi-jie.html":{"url":"di-yi-jie.html","title":"第一节","keywords":"","body":" private Map getOriginalBlackListFile(String filePath) { Map badWebBlacklists = new HashMap<>(10240); File file = new File(filePath); InputStream inputStream = null; try { inputStream = new FileInputStream(file); List data = IOUtils.readLines(inputStream, StandardCharsets.UTF_8); if (!ObjectUtils.isEmpty(data)) { for (String datum : data) { String[] split = datum.split(\",\"); BadWebBlacklist badWebBlacklist = new BadWebBlacklist(); badWebBlacklist.setBlacklistId(Long.valueOf(split[0])); badWebBlacklist.setDomain(split[1]); badWebBlacklist.setBadType(Integer.valueOf(split[2])); badWebBlacklists.put(badWebBlacklist.getBlacklistId(), badWebBlacklist); } } } catch (IOException e) { log.error(\"get original Black List File error!!! file path: {}\", filePath, e.fillInStackTrace()); } finally { try { IOUtils.close(inputStream); } catch (IOException e) { log.error(\"close inputStream error!!! file path: {}\", filePath, e.fillInStackTrace()); } } return badWebBlacklists; } © 2023 Mr.yang All Rights Reserved ,powered by Gitbook            updated 2023-02-17 20:22:58 "},"di-er-jie.html":{"url":"di-er-jie.html","title":"第二节","keywords":"","body":":1st_place_medal: 你的描述信息 这是一个链接 新浪新闻 some code www `Hello Markdown!` 高亮 华文行楷 © 2023 Mr.yang All Rights Reserved ,powered by Gitbook            updated 2023-02-16 18:03:36 "}}